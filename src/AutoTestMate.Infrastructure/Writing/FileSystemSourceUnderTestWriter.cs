using AutoTestMate.Application.Abstractions;
using System.Text;

namespace AutoTestMate.Infrastructure.Writing;

public sealed class FileSystemSourceUnderTestWriter : ISourceUnderTestWriter
{
    private readonly string _testsProjectDir;
    private const string DefaultNamespace = "AutoTestMate.Snippets";
    private const string DefaultClass     = "SnippetClass";

    public FileSystemSourceUnderTestWriter(string testsProjectDir) { _testsProjectDir = testsProjectDir; }

    public async Task<(string Namespace, string ClassName, string Path)> WriteAsync(ParsedCode input, CancellationToken ct = default)
    {
        Directory.CreateDirectory(_testsProjectDir);
        var ns  = string.IsNullOrWhiteSpace(input.DeclaredNamespace) ? DefaultNamespace : input.DeclaredNamespace!;
        var cls = string.IsNullOrWhiteSpace(input.DeclaredClass)     ? DefaultClass     : input.DeclaredClass!;

        var sb = new StringBuilder();
        sb.AppendLine("// Auto-generated by AutoTestMate");
        if (string.IsNullOrWhiteSpace(input.DeclaredNamespace)) sb.AppendLine($"namespace {ns};");
        sb.AppendLine();
        if (string.IsNullOrWhiteSpace(input.DeclaredClass)) { sb.AppendLine($"public class {cls}"); sb.AppendLine("{"); sb.AppendLine(input.Original); sb.AppendLine("}"); }
        else { sb.AppendLine(input.Original); }

        var path = Path.Combine(_testsProjectDir, "Generated", "SnippetUnderTest.cs");
        Directory.CreateDirectory(Path.GetDirectoryName(path)!);
        await File.WriteAllTextAsync(path, sb.ToString(), ct);
        return (ns, cls, path);
    }
}